



















exit



React, { useState, useEffect } from 'react';
import { 
  ArrowLeft, Upload, FileText, CheckCircle, Clock, XCircle, 
  Settings, Eye, Building2, AlertTriangle, Home, BarChart3, Calendar, Users,
  X, Download, Plus, Edit, Trash2
} from 'lucide-react';

// Mock types and data
interface Audit {
  clientName: string;
  clientId: string;
  website: string;
  relationshipOwner: string;
  auditOwner: string;
  progress: number;
}

interface UploadedFile {
  id: string;
  name: string;
  size: number;
  status: 'processing' | 'completed' | 'error';
  file?: File;
}

interface ExtractedControl {
  id: string;
  name: string;
  description: string;
  controlFamily: string;
  testingStatus: string;
  riskRating: string;
  owner?: string;
  frequency?: string;
  lastTested?: string;
  evidence?: string[];
  notes?: string;
  controlType?: string; // Preventive or Detective
}

interface ExtractedITAC {
  id: string;
  controlType: string;
  system: string;
  owner: string;
  testingStatus: string;
  riskLevel?: string;
  controlDescription?: string;
  testingStrategy?: string;
  frequency?: string;
  comments?: string;
  processName?: string; // The Process field from Excel
}

interface ExtractedKeyReport {
  id: string;
  name: string;
  frequency: string;
  owner: string;
  source: string;
  reviewStatus?: string;
  description?: string;
  period?: string;
  lastReviewed?: string;
  cycle?: string; // Business cycle (Inventory, Payroll, etc.)
  reportType?: string; // A, B, C classification
  keyControl?: string; // Associated control reference
}

interface ExcelData {
  controls: ExtractedControl[];
  itacs: ExtractedITAC[];
  keyReports: ExtractedKeyReport[];
  applications?: any[];
}

interface AuditSetupProps {
  selectedAudit?: Audit;
  onBack: () => void;
  currentModule: string;
  onModuleChange: (module: string) => void;
  uploadedFiles?: UploadedFile[];
  extractedData?: ExcelData;
  onFileUpload: (files: File[]) => void;
}

// Enhanced Mock data with realistic field mappings from the Excel
const mockExtractedData: ExcelData = {
  controls: [
    {
      id: 'FLDM-CA-C-OPS-03-01',
      name: 'System Backups',
      description: 'Management performs back-ups per policy and monitors back-up logs to ensure that the back-ups are successful.',
      controlFamily: 'ITGC',
      testingStatus: 'Not Started',
      riskRating: 'Low',
      owner: 'IT Operations',
      frequency: 'Weekly',
      lastTested: '2024-01-15',
      controlType: 'Preventive'
    },
    {
      id: 'FLDM-CA-C-SEC-03-03',
      name: 'Access Review', 
      description: 'Quarterly, business process owners review user account access for alignment with job duties, such that privileged access to systems, applications, drives, and databases is restricted to the appropriate personnel. The business owner documents and retains evidence of access review.',
      controlFamily: 'ITGC',
      testingStatus: 'In Progress',
      riskRating: 'Medium',
      owner: 'IT Security Team',
      frequency: 'Quarterly',
      controlType: 'Detective'
    },
    {
      id: 'FLDM-CA-C-SEC-03-04',
      name: 'Physical Security',
      description: 'Physical access to servers housing critical applications and systems is restricted to the appropriate personnel.',
      controlFamily: 'ITGC',
      testingStatus: 'Not Started',
      riskRating: 'Low',
      owner: 'IT Security Team',
      frequency: 'Quarterly',
      controlType: 'Detective'
    },
    {
      id: 'FLDM-SG-C-CM-02-01',
      name: 'Testing Controls',
      description: 'Testing must be performed for all program changes to ensure functionality and security before implementation.',
      controlFamily: 'ITGC',
      testingStatus: 'Not Started',
      riskRating: 'Medium',
      owner: 'IT Development',
      frequency: 'As needed',
      controlType: 'Preventive'
    },
    {
      id: 'FLDM-SG-C-CM-02-02',
      name: 'Change Approval',
      description: 'Approval is required prior to moving program changes to production environments.',
      controlFamily: 'ITGC',
      testingStatus: 'Completed',
      riskRating: 'Medium',
      owner: 'IT Operations',
      frequency: 'As needed',
      controlType: 'Preventive'
    }
  ],
  itacs: [
    {
      id: 'C-PP-04',
      controlType: 'Segregation of Duties Control',
      system: 'Expandable',
      owner: 'Michelle Cai',
      testingStatus: 'Not Started',
      riskLevel: 'Low',
      controlDescription: 'To ensure adequate segregation of duties between custody, recording, and authorization functions within the procure to pay process.',
      testingStrategy: 'Review system configuration and test sample transactions',
      frequency: 'Continuous',
      processName: 'Procure to Pay'
    },
    {
      id: 'S-PP-08',
      controlType: 'Segregation of Duties Control',
      system: 'VM',
      owner: 'Harry Lim', 
      testingStatus: 'In Progress',
      riskLevel: 'Low',
      controlDescription: 'To ensure adequate segregation of duties between custody, recording, and authorization functions within the procure to pay process.',
      testingStrategy: 'Test system access controls and review user permissions',
      frequency: 'Continuous',
      processName: 'Procure to Pay'
    },
    {
      id: 'S-IN-15',
      controlType: 'Standard Costing Control',
      system: 'AX',
      owner: 'Eric Tan',
      testingStatus: 'Not Started',
      riskLevel: 'Low',
      controlDescription: 'The AX application is configured as having standard costing methodology for inventory valuation.',
      testingStrategy: 'Review system configuration and test costing calculations',
      frequency: 'Continuous',
      processName: 'Inventory and Cost of Goods Sold'
    },
    {
      id: 'S-IN-13',
      controlType: 'Backflush Control',
      system: 'AX, VM and Expandable',
      owner: 'Eric Tan',
      testingStatus: 'Not Started',
      riskLevel: 'Low',
      controlDescription: 'The backflush control is appropriately implemented in the AX system to automatically relieve inventory upon production completion.',
      testingStrategy: 'Test backflush functionality and review transaction logs',
      frequency: 'Continuous',
      processName: 'Inventory and Cost of Goods Sold'
    }
  ],
  keyReports: [
    {
      id: 'RPT-1',
      name: 'Stock Status Editor (EX)',
      source: 'Expandable',
      frequency: 'Quarterly',
      owner: 'Cost Accounting Manager',
      reviewStatus: 'Current',
      description: 'As part of the quarter-end closing process, the Cost Accounting Manager or his designee calculates the required allowance for the excess and obsolete inventories.',
      period: 'Quarter-end',
      cycle: 'Inventory and Cost of Goods Sold',
      reportType: 'C',
      keyControl: 'S-IN-11'
    },
    {
      id: 'RPT-2',
      name: 'Shipped Not Invoiced Report (EX)',
      source: 'Expandable',
      frequency: 'Monthly', 
      owner: 'Senior Accountant',
      reviewStatus: 'Current',
      description: 'On a monthly basis, the Senior Accountant generates and reviews the Shipped Not Invoiced Report. During the review, the Senior Accountant verifies the invoices were issued for the shipped items before the cut-off date.',
      period: 'Month-end',
      cycle: 'Inventory and Cost of Goods Sold',
      reportType: 'A',
      keyControl: 'C-RE-03'
    },
    {
      id: 'RPT-3',
      name: 'Physical Inventory by Inventory Dimension (AX)',
      source: 'AX',
      frequency: 'Annual',
      owner: 'Cost Accounting Manager',
      reviewStatus: 'Current',
      description: 'The Cost Accounting Manager or designate reviews the results of the count. For significant variances, the Cost Accounting Manager or designate obtains an explanation for the variances.',
      period: 'Annual',
      cycle: 'Inventory and Cost of Goods Sold',
      reportType: 'C',
      keyControl: 'U-IN-01'
    },
    {
      id: 'RPT-4',
      name: 'Payroll register by Period (Workday)',
      source: 'Workday',
      frequency: 'Bi-weekly',
      owner: 'Accounting Manager',
      reviewStatus: 'Current',
      description: 'After the payroll register is generated, the rollforward and supporting documents are submitted to the Accounting Manager or designee for review.',
      period: 'Bi-weekly',
      cycle: 'Payroll and HR',
      reportType: 'B',
      keyControl: 'U-PY-02'
    }
  ],
  applications: [
    { name: 'Expandable', category: 'Financial Systems' },
    { name: 'AX', category: 'ERP System' },
    { name: 'VM', category: 'Financial Systems' },
    { name: 'Workday', category: 'Human Resources' }
  ]
};

const AUDIT_MODULES = [
  { id: 'itgcs', name: 'ITGCs', icon: CheckCircle },
  { id: 'key-reports', name: 'Key Reports', icon: FileText },
  { id: 'itacs', name: 'ITACs', icon: Settings },
  { id: 'walkthroughs', name: 'Walkthroughs', icon: Eye },
  { id: 'key-systems', name: 'Key Systems', icon: Building2 },
  { id: 'findings-log', name: 'Findings Log', icon: AlertTriangle }
];

const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

const getRiskRatingColor = (rating: string) => {
  switch (rating?.toLowerCase()) {
    case 'high': return 'bg-red-100 text-red-800 border-red-200';
    case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
    case 'low': return 'bg-green-100 text-green-800 border-green-200';
    default: return 'bg-gray-100 text-gray-800 border-gray-200';
  }
};

const getStatusColor = (status: string) => {
  switch (status?.toLowerCase()) {
    case 'completed': return 'bg-green-100 text-green-800';
    case 'in progress': return 'bg-blue-100 text-blue-800';
    case 'not started': return 'bg-gray-100 text-gray-800';
    case 'overdue': return 'bg-red-100 text-red-800';
    case 'current': return 'bg-green-100 text-green-800';
    default: return 'bg-gray-100 text-gray-800';
  }
};

// Enhanced Modal Component
const DetailModal = ({ isOpen, onClose, title, children }: {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
}) => {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">{title}</h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <X className="h-5 w-5" />
          </button>
        </div>
        <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
          {children}
        </div>
      </div>
    </div>
  );
};

export default function AuditSetup({
  selectedAudit = {
    clientName: 'Demo Client',
    clientId: 'DEMO-001',
    website: 'https://democlient.com',
    relationshipOwner: 'John Smith',
    auditOwner: 'Jane Doe',
    progress: 25
  },
  onBack,
  currentModule,
  onModuleChange,
  uploadedFiles = [],
  extractedData, // Remove default assignment to force real data usage
  onFileUpload
}: AuditSetupProps) {
  const [isDragOver, setIsDragOver] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  
  // Modal states
  const [selectedControl, setSelectedControl] = useState<ExtractedControl | null>(null);
  const [selectedITAC, setSelectedITAC] = useState<ExtractedITAC | null>(null);
  const [selectedReport, setSelectedReport] = useState<ExtractedKeyReport | null>(null);
  const [isControlModalOpen, setIsControlModalOpen] = useState(false);
  const [isITACModalOpen, setIsITACModalOpen] = useState(false);
  const [isReportModalOpen, setIsReportModalOpen] = useState(false);

  // Use real data or fallback to mock for development
  const currentData = extractedData || mockExtractedData;
console.log('🔍 DEBUG currentData:', currentData);
console.log('🔍 DEBUG first control:', currentData?.controls?.[0]);

  // Short description function for extracting meaningful titles
  const getShortDescription = (fullDescription: string, type: 'control' | 'itac' | 'report', reportName?: string, processName?: string): string => {
    // For reports, use the Report Name field directly
    if (type === 'report' && reportName) {
      return reportName;
    }
    
    // For ITACs, use the Process field directly
    if (type === 'itac' && processName) {
      return processName;
    }
    
    // For ITGCs, extract main topic from description
    if (type === 'control') {
      const desc = fullDescription.toLowerCase();
      
      if (desc.includes('back-up') || desc.includes('backup')) return 'System Backups';
      if (desc.includes('access') && desc.includes('review')) return 'Access Review';
      if (desc.includes('physical access')) return 'Physical Security';
      if (desc.includes('password')) return 'Password Management';
      if (desc.includes('change') && (desc.includes('management') || desc.includes('approval'))) return 'Change Management';
      if (desc.includes('monitoring') || desc.includes('log')) return 'System Monitoring';
      if (desc.includes('privilege')) return 'Privileged Access';
      if (desc.includes('patch') || desc.includes('update')) return 'Patch Management';
      if (desc.includes('testing') && desc.includes('program')) return 'Testing Controls';
      if (desc.includes('approval') && desc.includes('program')) return 'Change Approval';
      if (desc.includes('vulnerability')) return 'Vulnerability Management';
      if (desc.includes('segregation') && desc.includes('duties')) return 'Segregation of Duties';
      if (desc.includes('encryption')) return 'Data Encryption';
      if (desc.includes('network') || desc.includes('firewall')) return 'Network Security';
      
      // Fallback: return first meaningful phrase
      const words = fullDescription.split(' ');
      return words.slice(0, 3).join(' ') + (words.length > 3 ? '...' : '');
    }
    
    // Fallback for other types
    return fullDescription.split(' ').slice(0, 3).join(' ') + '...';
  };

  // Control Detail Modal Component
  const ControlDetailModal = ({ control, isOpen, onClose }: {
    control: ExtractedControl | null;
    isOpen: boolean;
    onClose: () => void;
  }) => {
    if (!control) return null;
    
    const shortTitle = getShortDescription(control.description, 'control');
    
    return (
      <DetailModal isOpen={isOpen} onClose={onClose} title={shortTitle}>
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Control ID</label>
              <p className="text-gray-900 font-mono text-sm bg-gray-50 p-2 rounded">{control.id}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Control Family</label>
              <p className="text-gray-900">{control.controlFamily}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Risk Rating</label>
              <span className={`inline-flex px-3 py-1 rounded-full text-sm font-medium border ${getRiskRatingColor(control.riskRating)}`}>
                {control.riskRating}
              </span>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Testing Status</label>
              <span className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(control.testingStatus)}`}>
                {control.testingStatus}
              </span>
            </div>
            {control.owner && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Control Owner</label>
                <p className="text-gray-900">{control.owner}</p>
              </div>
            )}
            {control.frequency && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Frequency</label>
                <p className="text-gray-900">{control.frequency}</p>
              </div>
            )}
            {control.controlType && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Control Type</label>
                <p className="text-gray-900">{control.controlType}</p>
              </div>
            )}
            {control.lastTested && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Last Tested</label>
                <p className="text-gray-900">{control.lastTested}</p>
              </div>
            )}
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Full Control Description</label>
            <p className="text-gray-900 bg-gray-50 p-4 rounded-lg text-sm leading-relaxed">{control.description}</p>
          </div>
          
          <div className="flex gap-4 pt-4 border-t border-gray-200">
            <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2">
              <Upload className="h-4 w-4" />
              Upload Evidence
            </button>
            <button className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg flex items-center gap-2">
              <Edit className="h-4 w-4" />
              Edit Details
            </button>
            <button className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg flex items-center gap-2">
              <Download className="h-4 w-4" />
              Export Testing Template
            </button>
          </div>
        </div>
      </DetailModal>
    );
  };

  // ITAC Detail Modal Component
  const ITACDetailModal = ({ itac, isOpen, onClose }: {
    itac: ExtractedITAC | null;
    isOpen: boolean;
    onClose: () => void;
  }) => {
    if (!itac) return null;
    
    const shortTitle = getShortDescription(itac.controlDescription || itac.controlType, 'itac', undefined, itac.processName);
    
    return (
      <DetailModal isOpen={isOpen} onClose={onClose} title={shortTitle}>
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Control ID</label>
              <p className="text-gray-900 font-mono text-sm bg-gray-50 p-2 rounded">{itac.id}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Business Process</label>
              <p className="text-gray-900">{itac.processName || 'Not specified'}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">IT System</label>
              <p className="text-gray-900">{itac.system}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Control Owner</label>
              <p className="text-gray-900">{itac.owner}</p>
            </div>
            {itac.riskLevel && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Risk Level</label>
                <span className={`inline-flex px-3 py-1 rounded-full text-sm font-medium border ${getRiskRatingColor(itac.riskLevel)}`}>
                  {itac.riskLevel}
                </span>
              </div>
            )}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Testing Status</label>
              <span className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(itac.testingStatus)}`}>
                {itac.testingStatus}
              </span>
            </div>
            {itac.frequency && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Control Frequency</label>
                <p className="text-gray-900">{itac.frequency}</p>
              </div>
            )}
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Control Type</label>
            <p className="text-gray-900 bg-blue-50 p-3 rounded-lg font-medium">{itac.controlType}</p>
          </div>
          
          {itac.controlDescription && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Full Control Description</label>
              <p className="text-gray-900 bg-gray-50 p-4 rounded-lg text-sm leading-relaxed">{itac.controlDescription}</p>
            </div>
          )}
          
          {itac.testingStrategy && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Testing Strategy</label>
              <p className="text-gray-900 bg-purple-50 p-4 rounded-lg text-sm">{itac.testingStrategy}</p>
            </div>
          )}
          
          {itac.comments && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Additional Comments</label>
              <p className="text-gray-900 bg-yellow-50 p-4 rounded-lg text-sm">{itac.comments}</p>
            </div>
          )}
          
          <div className="flex gap-4 pt-4 border-t border-gray-200">
            <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2">
              <Upload className="h-4 w-4" />
              Upload Evidence
            </button>
            <button className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg flex items-center gap-2">
              <Edit className="h-4 w-4" />
              Edit Details
            </button>
            <button className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg flex items-center gap-2">
              <Download className="h-4 w-4" />
              Export Testing Workbook
            </button>
          </div>
        </div>
      </DetailModal>
    );
  };

  // Key Report Detail Modal Component
  const KeyReportDetailModal = ({ report, isOpen, onClose }: {
    report: ExtractedKeyReport | null;
    isOpen: boolean;
    onClose: () => void;
  }) => {
    if (!report) return null;
    
    const shortTitle = getShortDescription(report.description || report.name, 'report', report.name);
    
    return (
      <DetailModal isOpen={isOpen} onClose={onClose} title={shortTitle}>
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Report ID</label>
              <p className="text-gray-900 font-mono text-sm bg-gray-50 p-2 rounded">{report.id}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Source System</label>
              <p className="text-gray-900">{report.source}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Report Frequency</label>
              <p className="text-gray-900">{report.frequency}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Business Owner</label>
              <p className="text-gray-900">{report.owner}</p>
            </div>
            {report.reviewStatus && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Review Status</label>
                <span className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(report.reviewStatus)}`}>
                  {report.reviewStatus}
                </span>
              </div>
            )}
            {report.period && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Reporting Period</label>
                <p className="text-gray-900">{report.period}</p>
              </div>
            )}
            {report.cycle && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Business Cycle</label>
                <p className="text-gray-900">{report.cycle}</p>
              </div>
            )}
            {report.reportType && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Report Type</label>
                <span className="text-gray-900 bg-blue-50 px-3 py-1 rounded font-medium">{report.reportType}</span>
              </div>
            )}
            {report.keyControl && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Associated Key Control</label>
                <p className="text-gray-900 font-mono text-sm">{report.keyControl}</p>
              </div>
            )}
          </div>
          
          {report.description && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Report Description & Usage</label>
              <p className="text-gray-900 bg-gray-50 p-4 rounded-lg text-sm leading-relaxed">{report.description}</p>
            </div>
          )}
          
          <div className="flex gap-4 pt-4 border-t border-gray-200">
            <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2">
              <Download className="h-4 w-4" />
              Request Report Sample
            </button>
            <button className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg flex items-center gap-2">
              <Edit className="h-4 w-4" />
              Edit Report Details
            </button>
            <button className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg flex items-center gap-2">
              <Upload className="h-4 w-4" />
              Upload Report Evidence
            </button>
          </div>
        </div>
      </DetailModal>
    );
  };

  const enhancedModules = [
    { id: 'overview', name: 'Overview', icon: Home },
    ...AUDIT_MODULES
  ];

  const getModuleIcon = (moduleId: string) => {
    const iconMap: { [key: string]: React.ComponentType<any> } = {
      'overview': Home,
      'itgcs': CheckCircle,
      'key-reports': FileText,
      'itacs': Settings,
      'walkthroughs': Eye,
      'key-systems': Building2,
      'findings-log': AlertTriangle
    };
    return iconMap[moduleId] || CheckCircle;
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = async (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    const files = Array.from(e.dataTransfer.files);
    await handleFileUpload(files);
  };

  const handleFileUpload = async (files: File[]) => {
    setIsUploading(true);
    try {
      onFileUpload(files);
    } catch (error) {
      console.error('File upload error:', error);
    } finally {
      setIsUploading(false);
    }
  };

  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const files = Array.from(e.target.files);
      handleFileUpload(files);
    }
  };

  // Click handlers for opening modals
  const handleControlClick = (control: ExtractedControl) => {
    setSelectedControl(control);
    setIsControlModalOpen(true);
  };

  const handleITACClick = (itac: ExtractedITAC) => {
    setSelectedITAC(itac);
    setIsITACModalOpen(true);
  };

  const handleReportClick = (report: ExtractedKeyReport) => {
    setSelectedReport(report);
    setIsReportModalOpen(true);
  };

  // Summary card click handlers
  const handleSummaryCardClick = (moduleId: string) => {
    onModuleChange(moduleId);
  };

  return (
    <div className="px-4 py-6 sm:px-0">
      <div className="flex items-center gap-4 mb-6">
        <button 
          onClick={onBack}
          className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
        >
          <ArrowLeft className="h-5 w-5" />
        </button>
        <div>
          <h1 className="text-2xl font-bold text-gray-900">{selectedAudit.clientName} - Audit Setup</h1>
          <p className="text-gray-600">Configure audit modules and upload documentation</p>
        </div>
      </div>

      {/* Module Tabs */}
      <div className="bg-white rounded-lg shadow-md mb-6">
        <div className="border-b border-gray-200">
          <nav className="flex space-x-8 px-6">
            {enhancedModules.map((module) => {
              const IconComponent = getModuleIcon(module.id);
              const isActive = currentModule === module.id;
              
              let itemCount = 0;
              if (module.id === 'itgcs') itemCount = currentData?.controls?.length || 0;
              else if (module.id === 'itacs') itemCount = currentData?.itacs?.length || 0;
              else if (module.id === 'key-reports') itemCount = currentData?.keyReports?.length || 0;
              else if (module.id === 'walkthroughs') itemCount = currentData?.applications?.length || 0;
              
              return (
                <button
                  key={module.id}
                  onClick={() => onModuleChange(module.id)}
                  className={`flex items-center space-x-2 py-4 border-b-2 font-medium text-sm transition-colors ${
                    isActive
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <IconComponent className="h-5 w-5" />
                  <span>{module.name}</span>
                  {itemCount > 0 && (
                    <span className="bg-blue-100 text-blue-800 text-xs font-medium px-2 py-1 rounded-full">
                      {itemCount}
                    </span>
                  )}
                </button>
              );
            })}
          </nav>
        </div>

        {/* Module Content */}
        <div className="p-6">
          {/* Overview Tab */}
          {currentModule === 'overview' && (
            <div>
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900">Audit Overview</h2>
              </div>

              {/* Audit Summary */}
              <div className="bg-gray-50 rounded-lg p-6 mb-8">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Audit Details</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Client Name</label>
                    <p className="text-gray-900 font-medium">{selectedAudit?.clientName}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Client ID</label>
                    <p className="text-gray-900">{selectedAudit?.clientId}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Website</label>
                    <p className="text-blue-600">{selectedAudit?.website}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Relationship Owner</label>
                    <p className="text-gray-900">{selectedAudit?.relationshipOwner}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Audit Owner</label>
                    <p className="text-gray-900">{selectedAudit?.auditOwner}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Progress</label>
                    <div className="flex items-center gap-2">
                      <div className="flex-1 bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${selectedAudit?.progress}%` }}
                        ></div>
                      </div>
                      <span className="text-sm font-medium text-gray-900">{selectedAudit?.progress}%</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* File Upload Area */}
              <div className="mb-8">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Upload Files</h3>
                <div
                  className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                    isDragOver 
                      ? 'border-blue-400 bg-blue-50' 
                      : 'border-gray-300 hover:border-gray-400'
                  }`}
                  onDragOver={handleDragOver}
                  onDragLeave={handleDragLeave}
                  onDrop={handleDrop}
                >
                  <Upload className={`h-12 w-12 mx-auto mb-4 ${isDragOver ? 'text-blue-500' : 'text-gray-400'}`} />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    {isUploading ? 'Processing files...' : 'Upload Excel Files'}
                  </h3>
                  <p className="text-gray-600 mb-4">
                    Drag and drop your Excel files here, or click to browse
                  </p>
                  <input
                    type="file"
                    multiple
                    accept=".xlsx,.xls"
                    onChange={handleFileInput}
                    className="hidden"
                    id="overview-file-upload"
                  />
                  <label
                    htmlFor="overview-file-upload"
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 cursor-pointer"
                  >
                    Choose Files
                  </label>
                </div>
              </div>

              {/* Uploaded Files */}
              {uploadedFiles && uploadedFiles.length > 0 && (
                <div className="mb-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Uploaded Files</h3>
                  <div className="space-y-3">
                    {uploadedFiles.map((file) => (
                      <div key={file.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-3">
                          <FileText className="h-5 w-5 text-gray-400" />
                          <div>
                            <p className="text-sm font-medium text-gray-900">{file.name}</p>
                            <p className="text-xs text-gray-500">{formatFileSize(file.size)}</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {file.status === 'completed' && <CheckCircle className="h-5 w-5 text-green-500" />}
                          {file.status === 'processing' && <Clock className="h-5 w-5 text-blue-500" />}
                          {file.status === 'error' && <XCircle className="h-5 w-5 text-red-500" />}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Clickable Metrics Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <button
                  onClick={() => handleSummaryCardClick('itgcs')}
                  className="bg-white border-2 border-green-200 rounded-lg p-6 hover:border-green-300 hover:shadow-lg transition-all text-left group"
                >
                  <div className="flex items-center justify-between mb-4">
                    <div className="p-3 bg-green-100 rounded-lg group-hover:bg-green-200 transition-colors">
                      <CheckCircle className="h-8 w-8 text-green-600" />
                    </div>
                    <div className="text-right">
                      <p className="text-3xl font-bold text-green-600">{currentData?.controls?.length || 0}</p>
                      <p className="text-sm text-gray-500">Controls</p>
                    </div>
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-green-700">IT General Controls</h3>
                  <p className="text-gray-600 text-sm">Access controls, change management, and infrastructure controls</p>
                </button>

                <button
                  onClick={() => handleSummaryCardClick('key-reports')}
                  className="bg-white border-2 border-blue-200 rounded-lg p-6 hover:border-blue-300 hover:shadow-lg transition-all text-left group"
                >
                  <div className="flex items-center justify-between mb-4">
                    <div className="p-3 bg-blue-100 rounded-lg group-hover:bg-blue-200 transition-colors">
                      <FileText className="h-8 w-8 text-blue-600" />
                    </div>
                    <div className="text-right">
                      <p className="text-3xl font-bold text-blue-600">{currentData?.keyReports?.length || 0}</p>
                      <p className="text-sm text-gray-500">Reports</p>
                    </div>
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-blue-700">Key Reports</h3>
                  <p className="text-gray-600 text-sm">Critical reports used in financial reporting processes</p>
                </button>

                <button
                  onClick={() => handleSummaryCardClick('itacs')}
                  className="bg-white border-2 border-purple-200 rounded-lg p-6 hover:border-purple-300 hover:shadow-lg transition-all text-left group"
                >
                  <div className="flex items-center justify-between mb-4">
                    <div className="p-3 bg-purple-100 rounded-lg group-hover:bg-purple-200 transition-colors">
                      <Settings className="h-8 w-8 text-purple-600" />
                    </div>
                    <div className="text-right">
                      <p className="text-3xl font-bold text-purple-600">{currentData?.itacs?.length || 0}</p>
                      <p className="text-sm text-gray-500">ITACs</p>
                    </div>
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-purple-700">IT Application Controls</h3>
                  <p className="text-gray-600 text-sm">Automated controls within applications and systems</p>
                </button>

                <button
                  onClick={() => handleSummaryCardClick('walkthroughs')}
                  className="bg-white border-2 border-orange-200 rounded-lg p-6 hover:border-orange-300 hover:shadow-lg transition-all text-left group"
                >
                  <div className="flex items-center justify-between mb-4">
                    <div className="p-3 bg-orange-100 rounded-lg group-hover:bg-orange-200 transition-colors">
                      <Eye className="h-8 w-8 text-orange-600" />
                    </div>
                    <div className="text-right">
                      <p className="text-3xl font-bold text-orange-600">{currentData?.applications?.length || 0}</p>
                      <p className="text-sm text-gray-500">Applications</p>
                    </div>
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-orange-700">Walkthroughs</h3>
                  <p className="text-gray-600 text-sm">Process documentation and business system walkthroughs</p>
                </button>
              </div>
            </div>
          )}

          {/* ITGCs Tab */}
          {currentModule === 'itgcs' && (
            <div>
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900">IT General Controls ({currentData?.controls?.length || 0})</h2>
              </div>

              {currentData?.controls && currentData.controls.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {currentData.controls.map((control) => {
                    const shortTitle = getShortDescription(control.description, 'control');
                    return (
                    <button
                      key={control.id}
                      onClick={() => handleControlClick(control)}
                      className="bg-white border-2 border-green-200 rounded-lg p-6 hover:border-green-300 hover:shadow-lg transition-all text-left group"
                    >
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-semibold text-gray-900 group-hover:text-green-700">
                          {shortTitle}
                        </h3>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getRiskRatingColor(control.riskRating)}`}>
                          {control.riskRating}
                        </span>
                      </div>
                      
                      <p className="text-gray-600 text-sm mb-4">
                        {control.description.length > 80 ? control.description.substring(0, 80) + '...' : control.description}
                      </p>
                      
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-500">ID: {control.id}</span>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(control.testingStatus)}`}>
                          {control.testingStatus}
                        </span>
                      </div>
                      
                      <div className="text-gray-500 text-sm mt-2">{control.controlFamily}</div>
                      
                      <div className="text-blue-600 text-sm mt-4 group-hover:text-blue-700">
                        Click to manage evidence →
                      </div>
                    </button>
                  );
                  })}
                </div>
              ) : (
                <div className="text-center py-12">
                  <CheckCircle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No IT General Controls</h3>
                  <p className="text-gray-600">Upload Excel files to extract ITGC data</p>
                </div>
              )}
            </div>
          )}

          {/* ITACs Tab */}
          {currentModule === 'itacs' && (
            <div>
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900">IT Application Controls ({currentData?.itacs?.length || 0})</h2>
              </div>

              {currentData?.itacs && currentData.itacs.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {currentData.itacs.map((itac) => {
                    const shortTitle = getShortDescription(itac.controlDescription || itac.controlType, 'itac', undefined, itac.processName);
                    return (
                    <button
                      key={itac.id}
                      onClick={() => handleITACClick(itac)}
                      className="bg-white border-2 border-purple-200 rounded-lg p-6 hover:border-purple-300 hover:shadow-lg transition-all text-left group"
                    >
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-semibold text-gray-900 group-hover:text-purple-700">
                          {shortTitle}
                        </h3>
                        {itac.riskLevel && (
                          <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getRiskRatingColor(itac.riskLevel)}`}>
                            {itac.riskLevel}
                          </span>
                        )}
                      </div>
                      
                      <p className="text-gray-600 text-sm mb-4">
                        {itac.controlDescription && itac.controlDescription.length > 80 ? 
                          itac.controlDescription.substring(0, 80) + '...' : 
                          itac.controlDescription || itac.controlType}
                      </p>
                      
                      <div className="flex items-center justify-between text-sm mb-2">
                        <span className="text-gray-500">System: {itac.system}</span>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(itac.testingStatus)}`}>
                          {itac.testingStatus}
                        </span>
                      </div>
                      
                      <div className="text-gray-500 text-sm mb-4">Owner: {itac.owner}</div>
                      
                      <div className="text-blue-600 text-sm group-hover:text-blue-700">
                        Click to manage evidence →
                      </div>
                    </button>
                  );
                  })}
                </div>
              ) : (
                <div className="text-center py-12">
                  <Settings className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No IT Application Controls</h3>
                  <p className="text-gray-600">Upload Excel files to extract ITAC data</p>
                </div>
              )}
            </div>
          )}

          {/* Key Reports Tab */}
          {currentModule === 'key-reports' && (
            <div>
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900">Key Reports ({currentData?.keyReports?.length || 0})</h2>
              </div>

              {currentData?.keyReports && currentData.keyReports.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {currentData.keyReports.map((report) => {
                    const shortTitle = getShortDescription(report.description || report.name, 'report', report.name);
                    return (
                    <button
                      key={report.id}
                      onClick={() => handleReportClick(report)}
                      className="bg-white border-2 border-blue-200 rounded-lg p-6 hover:border-blue-300 hover:shadow-lg transition-all text-left group"
                    >
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-semibold text-gray-900 group-hover:text-blue-700">
                          {shortTitle}
                        </h3>
                        {report.reviewStatus && (
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(report.reviewStatus)}`}>
                            {report.reviewStatus}
                          </span>
                        )}
                      </div>
                      
                      <p className="text-gray-600 text-sm mb-4">
                        {report.description && report.description.length > 80 ? 
                          report.description.substring(0, 80) + '...' : 
                          report.description || 'Report from ' + report.source}
                      </p>
                      
                      <div className="flex items-center justify-between text-sm mb-2">
                        <span className="text-gray-500">Source: {report.source}</span>
                        <span className="text-gray-500">{report.frequency}</span>
                      </div>
                      
                      <div className="text-gray-500 text-sm mb-4">Owner: {report.owner}</div>
                      
                      <div className="text-blue-600 text-sm group-hover:text-blue-700">
                        Click to download →
                      </div>
                    </button>
                  );
                  })}
                </div>
              ) : (
                <div className="text-center py-12">
                  <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No Key Reports</h3>
                  <p className="text-gray-600">Upload Excel files to extract key report data</p>
                </div>
              )}
            </div>
          )}

          {/* Other module placeholders */}
          {currentModule === 'walkthroughs' && (
            <div className="text-center py-12">
              <Eye className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Walkthroughs</h3>
              <p className="text-gray-600">
                {currentData?.applications?.length || 0} applications available for walkthrough scheduling
              </p>
            </div>
          )}

          {currentModule === 'key-systems' && (
            <div className="text-center py-12">
              <Building2 className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Key Systems</h3>
              <p className="text-gray-600">Critical systems and infrastructure components</p>
            </div>
          )}

          {currentModule === 'findings-log' && (
            <div className="text-center py-12">
              <AlertTriangle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Findings Log</h3>
              <p className="text-gray-600">Track and manage audit findings</p>
            </div>
          )}
        </div>
      </div>

      {/* Modals */}
      <ControlDetailModal
        control={selectedControl}
        isOpen={isControlModalOpen}
        onClose={() => {
          setIsControlModalOpen(false);
          setSelectedControl(null);
        }}
      />

      <ITACDetailModal
        itac={selectedITAC}
        isOpen={isITACModalOpen}
        onClose={() => {
          setIsITACModalOpen(false);
          setSelectedITAC(null);
        }}
      />

      <KeyReportDetailModal
        report={selectedReport}
        isOpen={isReportModalOpen}
        onClose={() => {
          setIsReportModalOpen(false);
          setSelectedReport(null);
        }}
      />
    </div>
  );
}
