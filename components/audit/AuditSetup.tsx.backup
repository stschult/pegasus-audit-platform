// components/audit/AuditSetup.tsx - PHASE 3.3 COMPLETE: Individual Send Buttons + Client Scheduling
'use client';

import React, { useState, useRef } from 'react';
import { 
  ArrowLeft, 
  Upload, 
  FileText, 
  CheckCircle, 
  Settings, 
  Building2, 
  AlertTriangle, 
  Home, 
  X, 
  Download, 
  Eye, 
  User, 
  Calendar, 
  Shield, 
  Database, 
  Lock, 
  Monitor, 
  FileCheck, 
  AlertCircle, 
  Clock, 
  Target, 
  Activity, 
  Zap, 
  BookOpen, 
  Users, 
  CheckSquare, 
  XCircle,
  Send,
  Mail,
  Globe,
  MapPin,
  CalendarDays,
  UserPlus
} from 'lucide-react';
import { ExcelData, ExtractedControl, ExtractedITAC, ExtractedKeyReport, UploadedFile } from '../../types';
import { useAppState } from '../../hooks/useAppState';
import ControlDetailModal from './ControlDetailModal';
import WalkthroughTab from './WalkthroughTab';
import WalkthroughDetailModal from './WalkthroughDetailModal';

interface AuditSetupProps {
  selectedAudit: {
    id: string;
    companyName: string;
    clientId: string;
    website?: string;
    clientLead?: string;
    auditLead?: string;
    auditType: string;
    riskAssessment: string;
    startDate: string;
    endDate: string;
    status: string;
    createdAt: string;
  };
  onBack: () => void;
  currentModule: string;
  onModuleChange: (moduleId: string) => void;
  uploadedFiles: UploadedFile[];
  extractedData: ExcelData | null;
  onFileUpload: (files: FileList) => void;
}

// Add type for walkthrough applications
interface Application {
  id: string;
  name: string;
  description: string;
  riskLevel: string;
  owner: string;
  category: string;
}

// âœ… NEW: Client Scheduling Modal Component
const ClientSchedulingModal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  application: Application;
  onSchedule: (schedulingData: any) => void;
}> = ({ isOpen, onClose, application, onSchedule }) => {
  const [schedulingData, setSchedulingData] = useState({
    date: '',
    time: '',
    location: 'Video Conference',
    locationDetails: '',
    attendees: [{ name: '', email: '', role: '' }],
    notes: '',
    duration: 60
  });

  const handleSubmit = () => {
    if (!schedulingData.date || !schedulingData.time) {
      alert('Please select a date and time for the walkthrough.');
      return;
    }

    onSchedule({
      ...schedulingData,
      attendees: schedulingData.attendees.filter(a => a.name && a.email)
    });
    onClose();
  };

  const addAttendee = () => {
    setSchedulingData(prev => ({
      ...prev,
      attendees: [...prev.attendees, { name: '', email: '', role: '' }]
    }));
  };

  const updateAttendee = (index: number, field: string, value: string) => {
    setSchedulingData(prev => ({
      ...prev,
      attendees: prev.attendees.map((attendee, i) => 
        i === index ? { ...attendee, [field]: value } : attendee
      )
    }));
  };

  const removeAttendee = (index: number) => {
    setSchedulingData(prev => ({
      ...prev,
      attendees: prev.attendees.filter((_, i) => i !== index)
    }));
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-xl font-semibold text-gray-900">Schedule Walkthrough</h2>
              <p className="text-sm text-gray-600 mt-1">{application.name} - {application.owner}</p>
            </div>
            <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
              <X className="h-6 w-6" />
            </button>
          </div>
        </div>

        <div className="p-6 space-y-6">
          {/* Date and Time */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <CalendarDays className="h-4 w-4 inline mr-1" />
                Date
              </label>
              <input
                type="date"
                value={schedulingData.date}
                onChange={(e) => setSchedulingData(prev => ({ ...prev, date: e.target.value }))}
                className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                min={new Date().toISOString().split('T')[0]}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <Clock className="h-4 w-4 inline mr-1" />
                Time
              </label>
              <input
                type="time"
                value={schedulingData.time}
                onChange={(e) => setSchedulingData(prev => ({ ...prev, time: e.target.value }))}
                className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          {/* Duration */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Duration (minutes)
            </label>
            <select
              value={schedulingData.duration}
              onChange={(e) => setSchedulingData(prev => ({ ...prev, duration: parseInt(e.target.value) }))}
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value={30}>30 minutes</option>
              <option value={60}>1 hour</option>
              <option value={90}>1.5 hours</option>
              <option value={120}>2 hours</option>
            </select>
          </div>

          {/* Location */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              <MapPin className="h-4 w-4 inline mr-1" />
              Location
            </label>
            <select
              value={schedulingData.location}
              onChange={(e) => setSchedulingData(prev => ({ ...prev, location: e.target.value }))}
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-2"
            >
              <option value="Video Conference">Video Conference</option>
              <option value="Client Office">Client Office</option>
              <option value="Auditor Office">Auditor Office</option>
              <option value="Other">Other</option>
            </select>
            {(schedulingData.location === 'Other' || schedulingData.location === 'Client Office') && (
              <input
                type="text"
                placeholder="Enter location details..."
                value={schedulingData.locationDetails}
                onChange={(e) => setSchedulingData(prev => ({ ...prev, locationDetails: e.target.value }))}
                className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            )}
          </div>

          {/* Attendees */}
          <div>
            <div className="flex items-center justify-between mb-3">
              <label className="block text-sm font-medium text-gray-700">
                <Users className="h-4 w-4 inline mr-1" />
                Attendees
              </label>
              <button
                onClick={addAttendee}
                className="text-sm text-blue-600 hover:text-blue-800 flex items-center gap-1"
              >
                <UserPlus className="h-4 w-4" />
                Add Attendee
              </button>
            </div>
            <div className="space-y-3">
              {schedulingData.attendees.map((attendee, index) => (
                <div key={index} className="grid grid-cols-1 md:grid-cols-4 gap-2 p-3 border border-gray-200 rounded-md">
                  <input
                    type="text"
                    placeholder="Name"
                    value={attendee.name}
                    onChange={(e) => updateAttendee(index, 'name', e.target.value)}
                    className="p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <input
                    type="email"
                    placeholder="Email"
                    value={attendee.email}
                    onChange={(e) => updateAttendee(index, 'email', e.target.value)}
                    className="p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <input
                    type="text"
                    placeholder="Role"
                    value={attendee.role}
                    onChange={(e) => updateAttendee(index, 'role', e.target.value)}
                    className="p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <button
                    onClick={() => removeAttendee(index)}
                    className="text-red-600 hover:text-red-800 flex items-center justify-center"
                  >
                    <X className="h-4 w-4" />
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* Notes */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Additional Notes
            </label>
            <textarea
              value={schedulingData.notes}
              onChange={(e) => setSchedulingData(prev => ({ ...prev, notes: e.target.value }))}
              placeholder="Any additional information about the walkthrough..."
              rows={3}
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>

        <div className="px-6 py-4 border-t border-gray-200 flex justify-end gap-3">
          <button
            onClick={onClose}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors"
          >
            Cancel
          </button>
          <button
            onClick={handleSubmit}
            className="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700 transition-colors flex items-center gap-2"
          >
            <CheckCircle className="h-4 w-4" />
            Schedule Walkthrough
          </button>
        </div>
      </div>
    </div>
  );
};

const AUDIT_MODULES = [
  { id: 'overview', name: 'Overview', icon: Home },
  { id: 'itgcs', name: 'ITGCs', icon: CheckCircle },
  { id: 'key-reports', name: 'Key Reports', icon: FileText },
  { id: 'itacs', name: 'ITACs', icon: Settings },
  { id: 'walkthroughs', name: 'Walkthroughs', icon: Eye },
  { id: 'key-systems', name: 'Key Systems', icon: Building2 },
  { id: 'findings-log', name: 'Findings Log', icon: AlertTriangle }
];

const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

const getShortDescriptionForParsing = (fullDescription: string): string => {
  if (!fullDescription || typeof fullDescription !== 'string') {
    return 'Unknown Control';
  }

  const description = fullDescription.toLowerCase().trim();
  
  // Comprehensive mapping with multiple keywords
  const keywordMappings = [
    {
      keywords: ['backup', 'restore', 'recovery', 'disaster recovery', 'data backup'],
      result: 'System Backups'
    },
    {
      keywords: ['access', 'user access', 'authorization', 'authentication', 'login', 'password', 'account'],
      result: 'Access Review'
    },
    {
      keywords: ['physical', 'facility', 'security', 'badge', 'premises', 'building'],
      result: 'Physical Security'
    },
    {
      keywords: ['change management', 'change control', 'system changes', 'configuration'],
      result: 'Change Management'
    },
    {
      keywords: ['segregation', 'separation', 'duties', 'roles', 'responsibilities'],
      result: 'Segregation of Duties'
    },
    {
      keywords: ['monitoring', 'logging', 'audit trail', 'system monitoring', 'log review'],
      result: 'System Monitoring'
    },
    {
      keywords: ['network', 'firewall', 'intrusion', 'network security', 'perimeter'],
      result: 'Network Security'
    },
    {
      keywords: ['patch', 'update', 'vulnerability', 'security patch', 'system update'],
      result: 'Patch Management'
    },
    {
      keywords: ['incident', 'response', 'incident management', 'security incident'],
      result: 'Incident Response'
    },
    {
      keywords: ['data retention', 'data disposal', 'data destruction', 'retention policy'],
      result: 'Data Retention'
    },
    {
      keywords: ['encryption', 'cryptography', 'data encryption', 'secure transmission'],
      result: 'Data Encryption'
    },
    {
      keywords: ['business continuity', 'continuity planning', 'disaster planning'],
      result: 'Business Continuity'
    },
    {
      keywords: ['antivirus', 'malware', 'virus protection', 'endpoint protection'],
      result: 'Malware Protection'
    },
    {
      keywords: ['capacity', 'performance', 'system capacity', 'resource management'],
      result: 'Capacity Management'
    },
    {
      keywords: ['job scheduling', 'batch processing', 'automated jobs', 'job control'],
      result: 'Job Scheduling'
    }
  ];

  // Find the best match
  for (const mapping of keywordMappings) {
    for (const keyword of mapping.keywords) {
      if (description.includes(keyword)) {
        return mapping.result;
      }
    }
  }

  // Fallback: use first few words if no match found
  const words = fullDescription.split(' ').slice(0, 3).join(' ');
  return words || 'System Control';
};

const AuditSetup: React.FC<AuditSetupProps> = ({
  selectedAudit,
  onBack,
  currentModule,
  onModuleChange,
  uploadedFiles,
  extractedData,
  onFileUpload
}) => {
  // âœ… PHASE 3.3: Get current React state AND walkthrough handler functions
  const {
    // GET CURRENT STATE FOR REAL-TIME UPDATES
    evidenceRequests,
    evidenceSubmissions,
    samplingConfigs,
    generatedSamples,
    user, // âœ… PHASE 2+: Get user for role-based features
    walkthroughApplications, // âœ… ADD WALKTHROUGH STATE
    walkthroughRequests,     // âœ… ADD WALKTHROUGH REQUESTS
    // Sampling functionality
    handleSamplingConfigSave,
    handleApproveSamples,
    handleCreateEvidenceRequest,
    getSamplingDataForControl,
    getSamplingStatusForControl,
    // âœ… PHASE 3.3: Add walkthrough handler functions
    handleSendWalkthroughRequests,
    handleUpdateWalkthroughRequest,
    handleScheduleWalkthrough, // âœ… NEW: Client scheduling
    // âœ… ADD STATE REFRESH FUNCTION
    refreshState
  } = useAppState();

  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isDragOver, setIsDragOver] = useState(false);
  const [selectedControl, setSelectedControl] = useState<ExtractedControl | null>(null);
  const [selectedITAC, setSelectedITAC] = useState<ExtractedITAC | null>(null);
  const [selectedKeyReport, setSelectedKeyReport] = useState<ExtractedKeyReport | null>(null);
  const [selectedWalkthrough, setSelectedWalkthrough] = useState<Application | null>(null);
  const [isControlModalOpen, setIsControlModalOpen] = useState(false);
  const [isITACModalOpen, setIsITACModalOpen] = useState(false);
  const [isKeyReportModalOpen, setIsKeyReportModalOpen] = useState(false);
  const [isWalkthroughModalOpen, setIsWalkthroughModalOpen] = useState(false);
  
  // âœ… PHASE 3.3: NEW - Client scheduling modal state
  const [isSchedulingModalOpen, setIsSchedulingModalOpen] = useState(false);
  const [schedulingApplication, setSchedulingApplication] = useState<Application | null>(null);
  const [schedulingRequestId, setSchedulingRequestId] = useState<string | null>(null);
  
  // âœ… NEW: Editable audit details state
  const [isEditingAuditDetails, setIsEditingAuditDetails] = useState(false);
  const [auditDetails, setAuditDetails] = useState({
    company: 'Fluidigm',
    website: 'pegasuslabs.xyz',
    auditType: 'SOC 2 Finance and ITGC',
    startDate: '8.1.2025',
    endDate: '10.1.2025',
    auditFirm: {
      name: 'Pegasus',
      contacts: [
        { role: 'Principle', name: 'Tom Cruise', email: 'tom@audit.com' },
        { role: 'Lead Finance', name: 'Brad Pitt', email: 'brad@audit.com' },
        { role: 'Lead ITGC', name: 'Erik Schultz', email: 'erik@audit.com' }
      ]
    },
    client: {
      name: 'Fluidigm',
      contacts: [
        { role: 'Principle', name: 'Batman', email: 'batman@fluidigm.com' },
        { role: 'Lead Finance', name: 'Superman', email: 'superman@fluidigm.com' },
        { role: 'Lead ITGC', name: 'Robin', email: 'robin@fluidigm.com' }
      ]
    }
  });

  // âœ… PHASE 3.1: Map WalkthroughApplication[] to Application[] interface
  const mapWalkthroughsToApplications = (): Application[] => {
    if (!walkthroughApplications || walkthroughApplications.length === 0) {
      return [];
    }
    
    return walkthroughApplications.map(walkthrough => ({
      id: walkthrough.id,
      name: walkthrough.name,
      description: walkthrough.description,
      riskLevel: walkthrough.riskLevel,
      owner: walkthrough.owner,
      category: walkthrough.category
    }));
  };

  // âœ… PHASE 3.2: Handle bulk send walkthrough requests
  const handleBulkSendWalkthroughRequests = () => {
    // Get all draft walkthrough requests for this audit
    const draftRequests = walkthroughRequests.filter(req => 
      req.auditId === selectedAudit?.id && 
      req.status === 'draft'
    );
    
    if (draftRequests.length === 0) {
      alert('No draft walkthrough requests to send.');
      return;
    }
    
    const requestIds = draftRequests.map(req => req.id);
    
    // Confirm before sending
    const confirmed = confirm(
      `Send ${draftRequests.length} walkthrough requests to the client? ` +
      `This will notify the client to schedule these walkthroughs.`
    );
    
    if (confirmed) {
      handleSendWalkthroughRequests(requestIds);
      
      // Show success message
      alert(
        `âœ… Successfully sent ${draftRequests.length} walkthrough requests! ` +
        `The client will receive notifications to schedule these sessions.`
      );
      
      // Refresh state to update UI immediately
      setTimeout(() => refreshState(), 100);
    }
  };

  // âœ… PHASE 3.3: Handle individual send request
  // âœ… REPLACE WITH THIS FIXED VERSION:
const handleIndividualSendRequest = (requestId: string, applicationName: string) => {
  const confirmed = confirm(
    `Send walkthrough request for "${applicationName}" to the client? ` +
    `This will notify the client to schedule this specific walkthrough.`
  );
  
  if (confirmed) {
    // âœ… CRITICAL FIX: Update ONLY the specific request, not all requests
    handleUpdateWalkthroughRequest(requestId, { 
      status: 'sent',
      sentAt: new Date().toISOString()
    });
    
    // Show success message
    alert(`âœ… Successfully sent walkthrough request for "${applicationName}" only!`);
    
    // Refresh state to update UI immediately
    setTimeout(() => refreshState(), 100);
  }
};
  // âœ… PHASE 3.3: Handle client scheduling
  const handleOpenScheduling = (application: Application) => {
    // Find the related walkthrough request
    const relatedRequest = walkthroughRequests?.find(req => 
      req.applicationName === application.name && 
      req.businessOwner === application.owner &&
      req.status === 'sent'
    );
    
    if (relatedRequest) {
      setSchedulingApplication(application);
      setSchedulingRequestId(relatedRequest.id);
      setIsSchedulingModalOpen(true);
    } else {
      alert('No active walkthrough request found for this application.');
    }
  };

  // âœ… PHASE 3.3: Handle schedule submission
  const handleScheduleSubmission = (schedulingData: any) => {
    if (schedulingRequestId) {
      handleScheduleWalkthrough(schedulingRequestId, schedulingData);
      
      // Show success message
      alert(`âœ… Walkthrough for "${schedulingApplication?.name}" has been scheduled successfully!`);
      
      // Reset modal state
      setIsSchedulingModalOpen(false);
      setSchedulingApplication(null);
      setSchedulingRequestId(null);
      
      // Refresh state to update UI immediately
      setTimeout(() => refreshState(), 100);
    }
  };

  const currentData = extractedData;

  const handleFileUpload = (files: FileList) => {
    onFileUpload(files);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    if (e.dataTransfer.files) {
      handleFileUpload(e.dataTransfer.files);
    }
  };

  const handleControlClick = (control: ExtractedControl) => {
    setSelectedControl(control);
    setIsControlModalOpen(true);
  };

  const handleITACClick = (itac: ExtractedITAC) => {
    setSelectedITAC(itac);
    setIsITACModalOpen(true);
  };

  const handleKeyReportClick = (keyReport: ExtractedKeyReport) => {
    setSelectedKeyReport(keyReport);
    setIsKeyReportModalOpen(true);
  };

  const handleWalkthroughClick = (application: Application) => {
    setSelectedWalkthrough(application);
    setIsWalkthroughModalOpen(true);
  };

  const handleSummaryCardClick = (moduleId: string) => {
    onModuleChange(moduleId);
  };

  const handleUpdateControl = (controlId: string, updates: any) => {
    console.log('Updating control:', controlId, updates);
    // Your existing control update logic here
  };

  const handleEvidenceUpload = (controlId: string, files: File[]) => {
    console.log('Uploading evidence for control:', controlId, files);
    // Your existing evidence upload logic here
  };

  // âœ… NEW: Audit details handlers
  const handleSaveAuditDetails = () => {
    console.log('Saving audit details:', auditDetails);
    // Here you would typically save to your backend
    setIsEditingAuditDetails(false);
  };

  const handleCancelEditAuditDetails = () => {
    // Reset to original values or fetch from backend
    setIsEditingAuditDetails(false);
  };

  const updateAuditDetail = (field: string, value: string) => {
    setAuditDetails(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const updateAuditFirmContact = (index: number, field: string, value: string) => {
    setAuditDetails(prev => ({
      ...prev,
      auditFirm: {
        ...prev.auditFirm,
        contacts: prev.auditFirm.contacts.map((contact, i) => 
          i === index ? { ...contact, [field]: value } : contact
        )
      }
    }));
  };

  const updateClientContact = (index: number, field: string, value: string) => {
    setAuditDetails(prev => ({
      ...prev,
      client: {
        ...prev.client,
        contacts: prev.client.contacts.map((contact, i) => 
          i === index ? { ...contact, [field]: value } : contact
        )
      }
    }));
  };

  // âœ… PHASE 3.1: Client-friendly status mapping function (moved up for better organization)
  const getClientFriendlyStatus = (technicalStatus: string): string => {
    const statusMap: { [key: string]: string } = {
      'No Sampling Required': 'Complete âœ“',
      'Needs Sampling': 'Being Configured',
      'Sampling Configured': 'Being Prepared',
      'Samples Generated': 'Being Prepared', 
      'Ready for Evidence Request': 'Being Prepared',
      'Evidence Request Sent': 'Action Required - Upload Evidence',
      'Partial Evidence Submitted': 'Partially Complete - More Evidence Needed',
      'All Evidence Submitted': 'Under Auditor Review',
      'Evidence Followup Required': 'Action Required - Follow Up Needed',
      'Evidence Approved': 'Complete âœ“'
    };

    return statusMap[technicalStatus] || technicalStatus;
  };

  // âœ… PHASE 4.2: Enhanced modal close handlers with immediate state refresh
  const handleControlModalClose = () => {
    console.log('ðŸ”„ PHASE 4.2: Refreshing state before closing control modal');
    refreshState(); // Force fresh state fetch for real-time updates
    setIsControlModalOpen(false);
    setSelectedControl(null);
    
    // âœ… PHASE 4.2: Force immediate UI refresh after modal actions
    setTimeout(() => {
      console.log('ðŸ”„ Secondary state refresh for UI synchronization');
      refreshState();
    }, 100);
  };

  const handleITACModalClose = () => {
    console.log('ðŸ”„ PHASE 4.2: Refreshing state before closing ITAC modal');
    refreshState(); // Force fresh state fetch for real-time updates
    setIsITACModalOpen(false);
    setSelectedITAC(null);
    
    // âœ… PHASE 4.2: Force immediate UI refresh after modal actions
    setTimeout(() => {
      console.log('ðŸ”„ Secondary state refresh for UI synchronization');
      refreshState();
    }, 100);
  };

  const handleKeyReportModalClose = () => {
    console.log('ðŸ”„ PHASE 4.2: Refreshing state before closing key report modal');
    refreshState(); // Force fresh state fetch for real-time updates
    setIsKeyReportModalOpen(false);
    setSelectedKeyReport(null);
    
    // âœ… PHASE 4.2: Force immediate UI refresh after modal actions
    setTimeout(() => {
      console.log('ðŸ”„ Secondary state refresh for UI synchronization');
      refreshState();
    }, 100);
  };

  const getControlIcon = (description: string) => {
    if (!description) return Shield;
    
    const desc = description.toLowerCase();
    if (desc.includes('access') || desc.includes('user') || desc.includes('authentication')) return User;
    if (desc.includes('backup') || desc.includes('recovery')) return Database;
    if (desc.includes('security') || desc.includes('firewall')) return Lock;
    if (desc.includes('monitoring') || desc.includes('logging')) return Monitor;
    if (desc.includes('change') || desc.includes('configuration')) return Settings;
    if (desc.includes('physical')) return Building2;
    return Shield;
  };

  const getRiskLevelColor = (riskLevel: string) => {
    switch (riskLevel?.toLowerCase()) {
      case 'high': return 'text-red-600 bg-red-100';
      case 'medium': return 'text-yellow-600 bg-yellow-100';
      case 'low': return 'text-green-600 bg-green-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  // âœ… PHASE 4.2: Enhanced status info with real-time state updates
  const getSamplingStatusInfo = (controlId: string) => {
    // âœ… PHASE 4.2: Always use fresh state for real-time updates
    const technicalStatus = getSamplingStatusForControl(controlId, evidenceRequests, evidenceSubmissions);
    const userType = user?.userType || 'auditor';
    
    // âœ… PHASE 3.1: Use client-friendly status for clients
    const displayStatus = userType === 'client' ? getClientFriendlyStatus(technicalStatus) : technicalStatus;
    
    // âœ… PHASE 4.2: Enhanced status color mapping with transition states
    const statusColors: { [key: string]: string } = {
      // Technical statuses (auditor view)
      'No Sampling Required': 'bg-gray-100 text-gray-600',
      'Needs Sampling': 'bg-yellow-100 text-yellow-700',
      'Sampling Configured': 'bg-yellow-100 text-yellow-700',
      'Samples Generated': 'bg-blue-100 text-blue-700',
      'Ready for Evidence Request': 'bg-blue-100 text-blue-700',
      'Evidence Request Sent': 'bg-purple-100 text-purple-700',
      'Partial Evidence Submitted': 'bg-orange-100 text-orange-700',
      'All Evidence Submitted': 'bg-green-100 text-green-700',
      'Evidence Followup Required': 'bg-red-100 text-red-700',
      'Evidence Approved': 'bg-green-100 text-green-700',
      
      // Client-friendly statuses
      'Complete âœ“': 'bg-green-100 text-green-700',
      'Being Configured': 'bg-blue-100 text-blue-700',
      'Being Prepared': 'bg-blue-100 text-blue-700',
      'Action Required - Upload Evidence': 'bg-red-100 text-red-700',
      'Partially Complete - More Evidence Needed': 'bg-orange-100 text-orange-700',
      'Under Auditor Review': 'bg-blue-100 text-blue-700',
      'Action Required - Follow Up Needed': 'bg-red-100 text-red-700'
    };
    
    const statusIcons: { [key: string]: any } = {
      // Technical statuses
      'No Sampling Required': null,
      'Needs Sampling': AlertCircle,
      'Sampling Configured': Clock,
      'Samples Generated': Eye,
      'Ready for Evidence Request': Target,
      'Evidence Request Sent': Send,
      'Partial Evidence Submitted': AlertCircle,
      'All Evidence Submitted': CheckCircle,
      'Evidence Followup Required': AlertTriangle,
      'Evidence Approved': CheckCircle,
      
      // Client-friendly statuses
      'Complete âœ“': CheckCircle,
      'Being Configured': Clock,
      'Being Prepared': Clock,
      'Action Required - Upload Evidence': AlertTriangle,
      'Partially Complete - More Evidence Needed': AlertCircle,
      'Under Auditor Review': Eye,
      'Action Required - Follow Up Needed': AlertTriangle
    };

    const colorClass = statusColors[displayStatus] || 'bg-gray-100 text-gray-600';
    const IconComponent = statusIcons[displayStatus];
    
    // âœ… PHASE 4.2: Enhanced role-based border logic with real-time updates
    let borderClass = 'border-gray-200'; // Default border
    let needsAction = false;
    
    if (userType === 'auditor') {
      // Red borders when auditor needs to act
      const auditorActionRequired = [
        'Needs Sampling', 
        'Sampling Configured', 
        'Ready for Evidence Request',
        'All Evidence Submitted', // Review needed
        'Partial Evidence Submitted' // Review needed
      ];
      needsAction = auditorActionRequired.includes(technicalStatus);
      borderClass = needsAction ? 'border-red-400 border-2' : 'border-gray-200';
    } else {
      // Red borders when client needs to act (using client-friendly status)
      const clientActionRequired = [
        'Action Required - Upload Evidence',
        'Action Required - Follow Up Needed',
        'Partially Complete - More Evidence Needed' // âœ… PHASE 4.2: Added partial completion
      ];
      needsAction = clientActionRequired.includes(displayStatus);
      borderClass = needsAction ? 'border-red-400 border-2' : 'border-gray-200';
    }
    
    return {
      status: displayStatus,
      technicalStatus,
      needsAction,
      colorClass,
      icon: IconComponent,
      borderClass,
      // âœ… PHASE 4.2: Add transition metadata for UI animations
      isTransitioning: false, // Could be enhanced with transition detection
      lastUpdated: Date.now() // For change detection
    };
  };

  const getModuleIcon = (moduleId: string) => {
    const iconMap: { [key: string]: React.ComponentType<any> } = {
      'overview': Home,
      'itgcs': CheckCircle,
      'key-reports': FileText,
      'itacs': Settings,
      'walkthroughs': Eye,
      'key-systems': Building2,
      'findings-log': AlertTriangle
    };
    return iconMap[moduleId] || CheckCircle;
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  // Get audit period for sampling configuration
  const auditPeriod = {
    startDate: selectedAudit?.startDate ? new Date(selectedAudit.startDate) : new Date('2025-01-01'),
    endDate: selectedAudit?.endDate ? new Date(selectedAudit.endDate) : new Date('2025-12-31')
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between py-6">
            <div className="flex items-center space-x-4">
              <button
                onClick={onBack}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <ArrowLeft className="h-5 w-5 text-gray-600" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">{selectedAudit.companyName}</h1>
                <p className="text-sm text-gray-600">
                  {selectedAudit.auditType} â€¢ {selectedAudit.clientId} â€¢ {new Date(selectedAudit.startDate).getFullYear()}
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-right">
                <p className="text-sm font-medium text-gray-900">
                  {new Date(selectedAudit.startDate).toLocaleDateString()} - {new Date(selectedAudit.endDate).toLocaleDateString()}
                </p>
                <p className="text-sm text-gray-600">Audit Period</p>
              </div>
              <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                selectedAudit.status === 'active' ? 'bg-green-100 text-green-800' :
                selectedAudit.status === 'planning' ? 'bg-blue-100 text-blue-800' :
                'bg-gray-100 text-gray-800'
              }`}>
                {selectedAudit.status.charAt(0).toUpperCase() + selectedAudit.status.slice(1)}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex space-x-8 overflow-x-auto">
            {AUDIT_MODULES.map((module) => {
              const isActive = currentModule === module.id;
              const Icon = getModuleIcon(module.id);
              
              let itemCount = 0;
              if (module.id === 'itgcs') itemCount = currentData?.controls?.length || 0;
              else if (module.id === 'itacs') itemCount = currentData?.itacs?.length || 0;
              else if (module.id === 'key-reports') itemCount = currentData?.keyReports?.length || 0;
              else if (module.id === 'walkthroughs') itemCount = walkthroughApplications?.length || 0; // âœ… FIXED
              
              return (
                <button
                  key={module.id}
                  onClick={() => onModuleChange(module.id)}
                  className={`flex items-center space-x-2 py-4 border-b-2 font-medium text-sm transition-colors ${
                    isActive
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <Icon className="h-4 w-4" />
                  <span>{module.name}</span>
                  {itemCount > 0 && (
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      isActive ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-600'
                    }`}>
                      {itemCount}
                    </span>
                  )}
                </button>
              );
            })}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="space-y-8">
          {/* Audit Details Section - Only show on Overview tab for auditors */}
          {currentModule === 'overview' && user?.userType !== 'client' && (
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Audit Details
                </h2>
                <div className="flex items-center gap-2">
                  {!isEditingAuditDetails ? (
                    <button
                      onClick={() => setIsEditingAuditDetails(true)}
                      className="px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center gap-2"
                    >
                      <Settings className="h-4 w-4" />
                      Edit Details
                    </button>
                  ) : (
                    <div className="flex items-center gap-2">
                      <button
                        onClick={handleSaveAuditDetails}
                        className="px-3 py-2 text-sm bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors flex items-center gap-2"
                      >
                        <CheckCircle className="h-4 w-4" />
                        Save
                      </button>
                      <button
                        onClick={handleCancelEditAuditDetails}
                        className="px-3 py-2 text-sm bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors flex items-center gap-2"
                      >
                        <X className="h-4 w-4" />
                        Cancel
                      </button>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Left Column: Audit Information */}
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">
                      Audit Information
                    </h3>
                    <div className="space-y-4">
                      <div className="flex items-start gap-3">
                        <Building2 className="h-5 w-5 text-gray-500 mt-0.5" />
                        <div className="flex-1">
                          <div className="font-medium text-gray-900 mb-2">Company</div>
                          {isEditingAuditDetails ? (
                            <input
                              type="text"
                              value={auditDetails.company}
                              onChange={(e) => updateAuditDetail('company', e.target.value)}
                              className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            />
                          ) : (
                            <div className="text-gray-700">{auditDetails.company}</div>
                          )}
                        </div>
                      </div>
                      
                      <div className="flex items-start gap-3">
                        <Globe className="h-5 w-5 text-gray-500 mt-0.5" />
                        <div className="flex-1">
                          <div className="font-medium text-gray-900 mb-2">Website</div>
                          {isEditingAuditDetails ? (
                            <input
                              type="text"
                              value={auditDetails.website}
                              onChange={(e) => updateAuditDetail('website', e.target.value)}
                              className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            />
                          ) : (
                            <a 
                              href={`https://${auditDetails.website}`} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-blue-600 hover:text-blue-800"
                            >
                              {auditDetails.website}
                            </a>
                          )}
                        </div>
                      </div>

                      <div className="flex items-start gap-3">
                        <FileText className="h-5 w-5 text-gray-500 mt-0.5" />
                        <div className="flex-1">
                          <div className="font-medium text-gray-900 mb-2">Audit Type</div>
                          {isEditingAuditDetails ? (
                            <input
                              type="text"
                              value={auditDetails.auditType}
                              onChange={(e) => updateAuditDetail('auditType', e.target.value)}
                              className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            />
                          ) : (
                            <div className="text-gray-700">{auditDetails.auditType}</div>
                          )}
                        </div>
                      </div>

                      <div className="flex items-start gap-3">
                        <Calendar className="h-5 w-5 text-gray-500 mt-0.5" />
                        <div className="flex-1">
                          <div className="font-medium text-gray-900 mb-2">Audit Period</div>
                          {isEditingAuditDetails ? (
                            <div className="grid grid-cols-2 gap-2">
                              <input
                                type="text"
                                value={auditDetails.startDate}
                                onChange={(e) => updateAuditDetail('startDate', e.target.value)}
                                className="p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="Start Date"
                              />
                              <input
                                type="text"
                                value={auditDetails.endDate}
                                onChange={(e) => updateAuditDetail('endDate', e.target.value)}
                                className="p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="End Date"
                              />
                            </div>
                          ) : (
                            <div className="text-gray-700">{auditDetails.startDate} - {auditDetails.endDate}</div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Right Column: Team Contacts */}
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">
                      Team Contacts
                    </h3>
                    
                    {/* Audit Firm Team */}
                    <div className="mb-6">
                      <div className="flex items-center gap-2 mb-3">
                        <Users className="h-4 w-4 text-blue-600" />
                        <h4 className="font-medium text-blue-900">
                          {isEditingAuditDetails ? (
                            <input
                              type="text"
                              value={auditDetails.auditFirm.name}
                              onChange={(e) => setAuditDetails(prev => ({
                                ...prev,
                                auditFirm: { ...prev.auditFirm, name: e.target.value }
                              }))}
                              className="px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            />
                          ) : (
                            `${auditDetails.auditFirm.name} (Audit Firm)`
                          )}
                        </h4>
                      </div>
                      <div className="space-y-3">
                        {auditDetails.auditFirm.contacts.map((contact, index) => (
                          <div key={index} className="p-4 rounded-lg border-l-4 border-l-blue-500 bg-gray-50">
                            <div className="space-y-2">
                              {isEditingAuditDetails ? (
                                <>
                                  <input
                                    type="text"
                                    value={contact.name}
                                    onChange={(e) => updateAuditFirmContact(index, 'name', e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded text-sm font-semibold focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    placeholder="Name"
                                  />
                                  <input
                                    type="text"
                                    value={contact.role}
                                    onChange={(e) => updateAuditFirmContact(index, 'role', e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    placeholder="Role"
                                  />
                                  <input
                                    type="email"
                                    value={contact.email}
                                    onChange={(e) => updateAuditFirmContact(index, 'email', e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    placeholder="Email"
                                  />
                                </>
                              ) : (
                                <>
                                  <div className="font-semibold text-gray-900">{contact.name}</div>
                                  <div className="text-sm text-gray-600">{contact.role}</div>
                                  <div className="space-y-1">
                                    <div className="flex items-center gap-2 text-sm text-gray-700">
                                      <Mail className="h-3 w-3" />
                                      <a href={`mailto:${contact.email}`} className="hover:text-blue-600">
                                        {contact.email}
                                      </a>
                                    </div>
                                  </div>
                                </>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Client Team */}
                    <div>
                      <div className="flex items-center gap-2 mb-3">
                        <Users className="h-4 w-4 text-green-600" />
                        <h4 className="font-medium text-green-900">
                          {isEditingAuditDetails ? (
                            <input
                              type="text"
                              value={auditDetails.client.name}
                              onChange={(e) => setAuditDetails(prev => ({
                                ...prev,
                                client: { ...prev.client, name: e.target.value }
                              }))}
                              className="px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent"
                            />
                          ) : (
                            `${auditDetails.client.name} (Client)`
                          )}
                        </h4>
                      </div>
                      <div className="space-y-3">
                        {auditDetails.client.contacts.map((contact, index) => (
                          <div key={index} className="p-4 rounded-lg border-l-4 border-l-green-500 bg-gray-50">
                            <div className="space-y-2">
                              {isEditingAuditDetails ? (
                                <>
                                  <input
                                    type="text"
                                    value={contact.name}
                                    onChange={(e) => updateClientContact(index, 'name', e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded text-sm font-semibold focus:ring-2 focus:ring-green-500 focus:border-transparent"
                                    placeholder="Name"
                                  />
                                  <input
                                    type="text"
                                    value={contact.role}
                                    onChange={(e) => updateClientContact(index, 'role', e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent"
                                    placeholder="Role"
                                  />
                                  <input
                                    type="email"
                                    value={contact.email}
                                    onChange={(e) => updateClientContact(index, 'email', e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent"
                                    placeholder="Email"
                                  />
                                </>
                              ) : (
                                <>
                                  <div className="font-semibold text-gray-900">{contact.name}</div>
                                  <div className="text-sm text-gray-600">{contact.role}</div>
                                  <div className="space-y-1">
                                    <div className="flex items-center gap-2 text-sm text-gray-700">
                                      <Mail className="h-3 w-3" />
                                      <a href={`mailto:${contact.email}`} className="hover:text-blue-600">
                                        {contact.email}
                                      </a>
                                    </div>
                                  </div>
                                </>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* âœ… FIXED: File Upload Section - Only show on Overview tab */}
          {currentModule === 'overview' && (
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Upload Files</h2>
              
              <div
                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                  isDragOver ? 'border-blue-400 bg-blue-50' : 'border-gray-300 hover:border-gray-400'
                }`}
                onDrop={handleDrop}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
              >
                <Upload className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">Upload ITGC Master List</h3>
                <p className="text-gray-600 mb-4">
                  Drag and drop your Excel file here, or click to browse
                </p>
                <button
                  onClick={() => fileInputRef.current?.click()}
                  className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  <Upload className="h-4 w-4 mr-2" />
                  Choose File
                </button>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept=".xlsx,.xls"
                  onChange={(e) => e.target.files && handleFileUpload(e.target.files)}
                  className="hidden"
                />
              </div>

              {/* Uploaded Files List */}
              {uploadedFiles.length > 0 && (
                <div className="mt-6">
                  <h3 className="text-sm font-medium text-gray-900 mb-3">Uploaded Files</h3>
                  <div className="space-y-2">
                    {uploadedFiles.map((file, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-3">
                          <FileText className="h-5 w-5 text-blue-600" />
                          <div>
                            <p className="text-sm font-medium text-gray-900">{file.name}</p>
                            <p className="text-xs text-gray-500">{formatFileSize(file.size)}</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <CheckCircle className="h-5 w-5 text-green-600" />
                          <span className="text-sm text-green-600">Processed</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Overview/Summary Cards - Only show on Overview tab */}
          {currentModule === 'overview' && (
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-6">Audit Overview</h2>
              
              {/* âœ… PHASE 2.3: Client-specific audit information section */}
              {user?.userType === 'client' && (
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Client Information</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Finance Lead Email
                      </label>
                      <input
                        type="email"
                        placeholder="finance.lead@company.com"
                        className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-transparent"
                      />
                      <p className="text-xs text-gray-500 mt-1">Primary contact for financial questions</p>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        IT Lead Email
                      </label>
                      <input
                        type="email"
                        placeholder="it.lead@company.com"
                        className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-transparent"
                      />
                      <p className="text-xs text-gray-500 mt-1">Primary contact for technical questions</p>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Audit Point of Contact
                      </label>
                      <input
                        type="email"
                        placeholder="audit.contact@company.com"
                        className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-transparent"
                      />
                      <p className="text-xs text-gray-500 mt-1">Main coordinator for audit activities</p>
                    </div>
                  </div>
                  
                  <div className="mt-6 flex items-center justify-between">
                    <div className="flex items-center text-sm text-gray-500">
                      <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      All fields are optional during development
                    </div>
                    <button className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
                      Save Contact Information
                    </button>
                  </div>
                </div>
              )}
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <button
                  onClick={() => handleSummaryCardClick('itgcs')}
                  className="bg-white border-2 border-blue-200 rounded-lg p-6 hover:border-blue-300 hover:shadow-lg transition-all text-left group"
                >
                  <div className="flex items-center justify-between mb-4">
                    <div className="p-3 bg-blue-100 rounded-lg group-hover:bg-blue-200 transition-colors">
                      <CheckCircle className="h-8 w-8 text-blue-600" />
                    </div>
                    <div className="text-right">
                      <p className="text-3xl font-bold text-blue-600">{currentData?.controls?.length || 0}</p>
                      <p className="text-sm text-gray-500">Controls</p>
                    </div>
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-blue-700">IT General Controls</h3>
                  <p className="text-gray-600 text-sm">
                    {user?.userType === 'client' 
                      ? 'View evidence requests and upload supporting documentation' 
                      : 'System-level controls that support the IT environment'
                    }
                  </p>
                </button>

                <button
                  onClick={() => handleSummaryCardClick('key-reports')}
                  className="bg-white border-2 border-green-200 rounded-lg p-6 hover:border-green-300 hover:shadow-lg transition-all text-left group"
                >
                  <div className="flex items-center justify-between mb-4">
                    <div className="p-3 bg-green-100 rounded-lg group-hover:bg-green-200 transition-colors">
                      <FileText className="h-8 w-8 text-green-600" />
                    </div>
                    <div className="text-right">
                      <p className="text-3xl font-bold text-green-600">{currentData?.keyReports?.length || 0}</p>
                      <p className="text-sm text-gray-500">Reports</p>
                    </div>
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-green-700">Key Reports</h3>
                  <p className="text-gray-600 text-sm">
                    {user?.userType === 'client' 
                      ? 'Access and provide key reports requested for audit testing' 
                      : 'Critical reports for audit evidence and testing'
                    }
                  </p>
                </button>

                <button
                  onClick={() => handleSummaryCardClick('itacs')}
                  className="bg-white border-2 border-purple-200 rounded-lg p-6 hover:border-purple-300 hover:shadow-lg transition-all text-left group"
                >
                  <div className="flex items-center justify-between mb-4">
                    <div className="p-3 bg-purple-100 rounded-lg group-hover:bg-purple-200 transition-colors">
                      <Settings className="h-8 w-8 text-purple-600" />
                    </div>
                    <div className="text-right">
                      <p className="text-3xl font-bold text-purple-600">{currentData?.itacs?.length || 0}</p>
                      <p className="text-sm text-gray-500">Controls</p>
                    </div>
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-purple-700">IT Application Controls</h3>
                  <p className="text-gray-600 text-sm">
                    {user?.userType === 'client' 
                      ? 'Provide evidence for automated controls within your systems' 
                      : 'Automated controls within applications and systems'
                    }
                  </p>
                </button>

                {/* âœ… FIXED WALKTHROUGH OVERVIEW CARD */}
                <button
                  onClick={() => handleSummaryCardClick('walkthroughs')}
                  className="bg-white border-2 border-orange-200 rounded-lg p-6 hover:border-orange-300 hover:shadow-lg transition-all text-left group"
                >
                  <div className="flex items-center justify-between mb-4">
                    <div className="p-3 bg-orange-100 rounded-lg group-hover:bg-orange-200 transition-colors">
                      <Eye className="h-8 w-8 text-orange-600" />
                    </div>
                    <div className="text-right">
                      {/* âœ… FIXED: Use walkthrough applications instead of currentData.applications */}
                      <p className="text-3xl font-bold text-orange-600">{walkthroughApplications?.length || 0}</p>
                      <p className="text-sm text-gray-500">Walkthroughs</p>
                    </div>
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-orange-700">Walkthroughs</h3>
                  <p className="text-gray-600 text-sm">
                    {user?.userType === 'client' 
                      ? 'Schedule and participate in business process walkthroughs' 
                      : 'Process documentation and business system walkthroughs'
                    }
                  </p>
                  {/* âœ… ADD TIMELINE ALERT for first week deadline */}
                  {walkthroughApplications && walkthroughApplications.length > 0 && (
                    <div className="mt-3 flex items-center gap-2 p-2 bg-red-50 border border-red-200 rounded-md">
                      <AlertTriangle className="h-4 w-4 text-red-600 flex-shrink-0" />
                      <p className="text-xs text-red-700">
                        Action Required: Schedule {walkthroughApplications.length} walkthroughs by end of first week
                      </p>
                    </div>
                  )}
                </button>
              </div>
            </div>
          )}

          {/* ITGCs Tab - âœ… FIXED: Added overflow protection */}
          {currentModule === 'itgcs' && (
            <div>
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900">IT General Controls ({currentData?.controls?.length || 0})</h2>
                <button className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                  <Download className="h-4 w-4 mr-2" />
                  Export Controls
                </button>
              </div>

              {currentData?.controls && currentData.controls.length > 0 ? (
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {currentData.controls.map((control, index) => {
                    const Icon = getControlIcon(control.description);
                    const shortDescription = getShortDescriptionForParsing(control.description);
                    const statusInfo = getSamplingStatusInfo(control.id);
                    
                    return (
                      <div
                        key={control.id || index}
                        onClick={() => handleControlClick(control)}
                        className={`bg-white border rounded-lg p-6 cursor-pointer hover:shadow-lg transition-all group overflow-hidden ${statusInfo.borderClass}`}
                      >
                        <div className="flex items-start justify-between mb-4">
                          <div className="flex items-center space-x-3 flex-1 min-w-0">
                            <div className="p-2 bg-blue-100 rounded-lg group-hover:bg-blue-200 transition-colors flex-shrink-0">
                              <Icon className="h-5 w-5 text-blue-600" />
                            </div>
                            <div className="flex-1 min-w-0">
                              <h3 className="font-semibold text-gray-900 group-hover:text-blue-700 transition-colors truncate">
                                {shortDescription}
                              </h3>
                              <p className="text-sm text-gray-500 truncate">{control.category || 'General Control'}</p>
                            </div>
                          </div>
                          <div className="flex flex-col items-end space-y-2 flex-shrink-0 ml-3">
                            <span className={`px-2 py-1 text-xs font-medium rounded-full whitespace-nowrap ${getRiskLevelColor(control.riskLevel || 'medium')}`}>
                              {(control.riskLevel || 'MEDIUM').toUpperCase()}
                            </span>
                            {/* âœ… REAL-TIME STATUS BADGE WITH OVERFLOW PROTECTION */}
                            {statusInfo.status !== 'No Sampling Required' && statusInfo.status !== 'Complete âœ“' && (
                              <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap ${statusInfo.colorClass}`}>
                                {statusInfo.icon && <statusInfo.icon size={12} />}
                                <span className="truncate max-w-24">{statusInfo.status}</span>
                              </div>
                            )}
                          </div>
                        </div>
                        
                        <p className="text-sm text-gray-600 mb-4 line-clamp-2">
                          {control.description}
                        </p>
                        
                        <div className="flex items-center justify-between text-sm">
                          <div className="flex items-center space-x-1 text-gray-500">
                            <Target className="h-4 w-4" />
                            <span className="truncate">{control.controlObjective || 'Control Objective'}</span>
                          </div>
                          <div className="flex items-center space-x-1 text-blue-600 group-hover:text-blue-700 flex-shrink-0">
                            <Eye className="h-4 w-4" />
                            <span>View Details</span>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : (
                <div className="text-center py-12">
                  <CheckCircle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No IT General Controls Found</h3>
                  <p className="text-gray-600">Upload an Excel file to load ITGC data</p>
                </div>
              )}
            </div>
          )}

          {/* Key Reports Tab - âœ… FIXED: Added overflow protection */}
          {currentModule === 'key-reports' && (
            <div>
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900">Key Reports ({currentData?.keyReports?.length || 0})</h2>
                <button className="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
                  <Download className="h-4 w-4 mr-2" />
                  Export Reports
                </button>
              </div>

              {currentData?.keyReports && currentData.keyReports.length > 0 ? (
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {currentData.keyReports.map((report, index) => {
                    const statusInfo = getSamplingStatusInfo(report.id);
                    
                    return (
                      <div
                        key={report.id || index}
                        onClick={() => handleKeyReportClick(report)}
                        className={`bg-white border rounded-lg p-6 cursor-pointer hover:shadow-lg transition-all group overflow-hidden ${statusInfo.borderClass}`}
                      >
                        <div className="flex items-start justify-between mb-4">
                          <div className="flex items-center space-x-3 flex-1 min-w-0">
                            <div className="p-2 bg-green-100 rounded-lg group-hover:bg-green-200 transition-colors flex-shrink-0">
                              <FileText className="h-5 w-5 text-green-600" />
                            </div>
                            <div className="flex-1 min-w-0">
                              <h3 className="font-semibold text-gray-900 group-hover:text-green-700 transition-colors truncate">
                                {report.name || `Report ${index + 1}`}
                              </h3>
                              <p className="text-sm text-gray-500 truncate">{report.reportType || 'Standard Report'}</p>
                            </div>
                          </div>
                          <div className="flex flex-col items-end space-y-2 flex-shrink-0 ml-3">
                            <span className={`px-2 py-1 text-xs font-medium rounded-full whitespace-nowrap flex-shrink-0 ${getRiskLevelColor(report.criticality || 'medium')}`}>
                              {(report.criticality || 'MEDIUM').toUpperCase()}
                            </span>
                            {/* âœ… REAL-TIME STATUS BADGE FOR KEY REPORTS */}
                            {statusInfo.status !== 'No Sampling Required' && statusInfo.status !== 'Complete âœ“' && (
                              <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap ${statusInfo.colorClass}`}>
                                {statusInfo.icon && <statusInfo.icon size={12} />}
                                <span className="truncate max-w-24">{statusInfo.status}</span>
                              </div>
                            )}
                          </div>
                        </div>
                        
                        <p className="text-sm text-gray-600 mb-4 line-clamp-2">
                          {report.description || 'Key report for audit testing and evidence collection'}
                        </p>
                        
                        <div className="flex items-center justify-between text-sm">
                          <div className="flex items-center space-x-1 text-gray-500 flex-1 min-w-0">
                            <Activity className="h-4 w-4 flex-shrink-0" />
                            <span className="truncate">{report.frequency || 'As Needed'}</span>
                          </div>
                          <div className="flex items-center space-x-1 text-green-600 group-hover:text-green-700 flex-shrink-0">
                            <Eye className="h-4 w-4" />
                            <span>View Details</span>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : (
                <div className="text-center py-12">
                  <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No Key Reports Found</h3>
                  <p className="text-gray-600">Upload an Excel file to load key reports data</p>
                </div>
              )}
            </div>
          )}

          {/* ITACs Tab - âœ… FIXED: Added overflow protection */}
          {currentModule === 'itacs' && (
            <div>
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900">IT Application Controls ({currentData?.itacs?.length || 0})</h2>
                <button className="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors">
                  <Download className="h-4 w-4 mr-2" />
                  Export ITACs
                </button>
              </div>

              {currentData?.itacs && currentData.itacs.length > 0 ? (
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {currentData.itacs.map((itac, index) => {
                    const statusInfo = getSamplingStatusInfo(itac.id);
                    
                    return (
                      <div
                        key={itac.id || index}
                        onClick={() => handleITACClick(itac)}
                        className={`bg-white border rounded-lg p-6 cursor-pointer hover:shadow-lg transition-all group overflow-hidden ${statusInfo.borderClass}`}
                      >
                        <div className="flex items-start justify-between mb-4">
                          <div className="flex items-center space-x-3 flex-1 min-w-0">
                            <div className="p-2 bg-purple-100 rounded-lg group-hover:bg-purple-200 transition-colors flex-shrink-0">
                              <Settings className="h-5 w-5 text-purple-600" />
                            </div>
                            <div className="flex-1 min-w-0">
                              <h3 className="font-semibold text-gray-900 group-hover:text-purple-700 transition-colors truncate">
                                {itac.processName || `ITAC ${index + 1}`}
                              </h3>
                              <p className="text-sm text-gray-500 truncate">{itac.system || 'Application Control'}</p>
                            </div>
                          </div>
                          <div className="flex flex-col items-end space-y-2 flex-shrink-0 ml-3">
                            <span className={`px-2 py-1 text-xs font-medium rounded-full whitespace-nowrap ${getRiskLevelColor(itac.riskLevel || 'medium')}`}>
                              {(itac.riskLevel || 'MEDIUM').toUpperCase()}
                            </span>
                            {/* âœ… REAL-TIME STATUS BADGE FOR ITACS WITH OVERFLOW PROTECTION */}
                            {statusInfo.status !== 'No Sampling Required' && statusInfo.status !== 'Complete âœ“' && (
                              <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap ${statusInfo.colorClass}`}>
                                {statusInfo.icon && <statusInfo.icon size={12} />}
                                <span className="truncate max-w-24">{statusInfo.status}</span>
                              </div>
                            )}
                          </div>
                        </div>
                        
                        <p className="text-sm text-gray-600 mb-4 line-clamp-2">
                          {itac.controlDescription || itac.controlType || 'Automated control within application system'}
                        </p>
                        
                        <div className="flex items-center justify-between text-sm">
                          <div className="flex items-center space-x-1 text-gray-500 flex-1 min-w-0">
                            <Zap className="h-4 w-4 flex-shrink-0" />
                            <span className="truncate">{itac.controlType || 'Automated'}</span>
                          </div>
                          <div className="flex items-center space-x-1 text-purple-600 group-hover:text-purple-700 flex-shrink-0">
                            <Eye className="h-4 w-4" />
                            <span>View Details</span>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : (
                <div className="text-center py-12">
                  <Settings className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No IT Application Controls Found</h3>
                  <p className="text-gray-600">Upload an Excel file to load ITAC data</p>
                </div>
              )}
            </div>
          )}

          {/* âœ… PHASE 3.3: ENHANCED WALKTHROUGHS TAB WITH INDIVIDUAL BUTTONS + CLIENT SCHEDULING */}
          {currentModule === 'walkthroughs' && (
            <div>
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900">
                  Walkthroughs ({walkthroughApplications?.length || 0})
                </h2>
                <div className="flex items-center gap-3">
                  {/* âœ… PHASE 3.2: CONNECTED BULK SEND BUTTON for auditors */}
                  {user?.userType === 'auditor' && walkthroughApplications && walkthroughApplications.length > 0 && (
                    <button 
                      onClick={handleBulkSendWalkthroughRequests}
                      className="inline-flex items-center px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 transition-colors"
                    >
                      <Send className="h-4 w-4 mr-2" />
                      Send All Requests
                    </button>
                  )}
                  <button className="inline-flex items-center px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 transition-colors">
                    <Download className="h-4 w-4 mr-2" />
                    Export Walkthroughs
                  </button>
                </div>
              </div>

              {/* âœ… RESTORED: TIMELINE ALERT for auditors */}
              {user?.userType === 'auditor' && walkthroughApplications && walkthroughApplications.length > 0 && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                  <div className="flex items-start gap-3">
                    <AlertTriangle className="h-5 w-5 text-red-600 mt-0.5 flex-shrink-0" />
                    <div>
                      <h3 className="font-medium text-red-900 mb-1">Walkthrough Timeline Alert</h3>
                      <p className="text-sm text-red-700 mb-2">
                        {walkthroughApplications.length} walkthroughs need to be scheduled and completed within the first week of the audit period.
                      </p>
                      <p className="text-xs text-red-600">
                        Send requests to client now to allow time for coordination with business owners.
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {/* âœ… PHASE 3.3: ENHANCED WALKTHROUGH CARDS WITH INDIVIDUAL BUTTONS + SCHEDULING */}
              {walkthroughApplications && walkthroughApplications.length > 0 ? (
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {walkthroughApplications.map((walkthrough, index) => {
                    const applicationName = walkthrough.name;
                    const businessOwner = walkthrough.owner;
                    
                    // Get the status from walkthroughRequests if available
                    const relatedRequest = walkthroughRequests?.find(req => 
                      req.applicationName === applicationName && 
                      req.businessOwner === businessOwner
                    );
                    
                    const status = relatedRequest?.status || 'draft';
                    const needsAction = user?.userType === 'auditor' && status === 'draft';
                    const borderClass = needsAction ? 'border-red-400 border-2' : 'border-gray-200';
                    
                    return (
                      <div
                        key={`${applicationName}-${businessOwner}-${index}`}
                        className={`bg-white border rounded-lg p-6 hover:shadow-lg transition-all group overflow-hidden ${borderClass}`}
                      >
                        <div className="flex items-start justify-between mb-4">
                          <div className="flex items-center space-x-3 flex-1 min-w-0">
                            <div className="p-2 bg-orange-100 rounded-lg group-hover:bg-orange-200 transition-colors flex-shrink-0">
                              <Eye className="h-5 w-5 text-orange-600" />
                            </div>
                            <div className="flex-1 min-w-0">
                              <h3 className="font-semibold text-gray-900 group-hover:text-orange-700 transition-colors truncate">
                                {applicationName}
                              </h3>
                              <p className="text-sm text-gray-500 truncate">{businessOwner}</p>
                            </div>
                          </div>
                          <div className="flex flex-col items-end space-y-2 flex-shrink-0 ml-3">
                            <span className="px-2 py-1 text-xs font-medium rounded-full whitespace-nowrap bg-orange-100 text-orange-600">
                              {walkthrough.riskLevel.toUpperCase()}
                            </span>
                            {/* âœ… ENHANCED: STATUS BADGES WITH ROLE-BASED DISPLAY */}
                            {user?.userType === 'auditor' && status === 'draft' && (
                              <div className="flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap bg-red-100 text-red-700">
                                <AlertTriangle size={12} />
                                <span className="truncate max-w-24">Send Request</span>
                              </div>
                            )}
                            {status === 'sent' && (
                              <div className="flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap bg-blue-100 text-blue-700">
                                <Clock size={12} />
                                <span className="truncate max-w-24">
                                  {user?.userType === 'client' ? 'Schedule Required' : 'Awaiting Response'}
                                </span>
                              </div>
                            )}
                            {status === 'scheduled' && (
                              <div className="flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium whitespace-nowrap bg-green-100 text-green-700">
                                <CheckCircle size={12} />
                                <span className="truncate max-w-24">Scheduled</span>
                              </div>
                            )}
                          </div>
                        </div>
                        
                        <p className="text-sm text-gray-600 mb-4 line-clamp-2">
                          {walkthrough.description}
                        </p>
                        
                        <div className="flex items-center justify-between text-sm mb-4">
                          <div className="flex items-center space-x-1 text-gray-500 flex-1 min-w-0">
                            <Users className="h-4 w-4 flex-shrink-0" />
                            <span className="truncate">{businessOwner}</span>
                          </div>
                        </div>

                        {/* âœ… PHASE 3.3: ACTION BUTTONS SECTION */}
                        <div className="border-t border-gray-100 pt-4 space-y-2">
                          {/* AUDITOR ACTIONS */}
                          {user?.userType === 'auditor' && (
                            <>
                              {status === 'draft' && relatedRequest && (
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    handleIndividualSendRequest(relatedRequest.id, applicationName);
                                  }}
                                  className="w-full inline-flex items-center justify-center px-3 py-2 bg-orange-600 text-white text-sm font-medium rounded-md hover:bg-orange-700 transition-colors"
                                >
                                  <Send className="h-4 w-4 mr-2" />
                                  Send Request
                                </button>
                              )}
                              {status !== 'draft' && (
                                <div className="text-center text-sm text-gray-500 py-2">
                                  {status === 'sent' && 'Waiting for client to schedule'}
                                  {status === 'scheduled' && 'Scheduled - Ready for walkthrough'}
                                  {status === 'completed' && 'Walkthrough completed'}
                                </div>
                              )}
                            </>
                          )}

                          {/* CLIENT ACTIONS */}
                          {user?.userType === 'client' && (
                            <>
                              {status === 'sent' && (
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    handleOpenScheduling({
                                      id: walkthrough.id,
                                      name: applicationName,
                                      description: walkthrough.description,
                                      riskLevel: walkthrough.riskLevel,
                                      owner: businessOwner,
                                      category: walkthrough.category
                                    });
                                  }}
                                  className="w-full inline-flex items-center justify-center px-3 py-2 bg-green-600 text-white text-sm font-medium rounded-md hover:bg-green-700 transition-colors"
                                >
                                  <Calendar className="h-4 w-4 mr-2" />
                                  Schedule Walkthrough
                                </button>
                              )}
                              {status === 'scheduled' && (
                                <div className="text-center text-sm text-green-600 py-2 font-medium">
                                  âœ… Walkthrough Scheduled
                                </div>
                              )}
                              {status === 'draft' && (
                                <div className="text-center text-sm text-gray-500 py-2">
                                  Waiting for auditor to send request
                                </div>
                              )}
                            </>
                          )}

                          {/* VIEW DETAILS BUTTON (ALWAYS AVAILABLE) */}
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleWalkthroughClick({
                                id: walkthrough.id,
                                name: applicationName,
                                description: walkthrough.description,
                                riskLevel: walkthrough.riskLevel,
                                owner: businessOwner,
                                category: walkthrough.category
                              });
                            }}
                            className="w-full inline-flex items-center justify-center px-3 py-2 bg-gray-100 text-gray-700 text-sm font-medium rounded-md hover:bg-gray-200 transition-colors"
                          >
                            <Eye className="h-4 w-4 mr-2" />
                            View Details
                          </button>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : (
                <div className="text-center py-12">
                  <Eye className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No Walkthrough Applications Found</h3>
                  <p className="text-gray-600">Upload an Excel file with Key Reports to extract walkthrough applications</p>
                </div>
              )}
            </div>
          )}

          {/* Other module placeholders */}
          {currentModule === 'key-systems' && (
            <div className="text-center py-12">
              <Building2 className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Key Systems</h3>
              <p className="text-gray-600">
                System inventory and technology stack documentation
              </p>
            </div>
          )}

          {currentModule === 'findings-log' && (
            <div className="text-center py-12">
              <AlertTriangle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Findings Log</h3>
              <p className="text-gray-600">
                Track audit findings, deficiencies, and remediation status
              </p>
            </div>
          )}
        </div>
      </div>

      {/* âœ… PHASE 3.3: CLIENT SCHEDULING MODAL */}
      <ClientSchedulingModal
        isOpen={isSchedulingModalOpen}
        onClose={() => {
          setIsSchedulingModalOpen(false);
          setSchedulingApplication(null);
          setSchedulingRequestId(null);
        }}
        application={schedulingApplication!}
        onSchedule={handleScheduleSubmission}
      />

      {/* âœ… FIXED: Control Detail Modal with state refresh on close */}
      {selectedControl && (
        <ControlDetailModal
          control={selectedControl}
          isOpen={isControlModalOpen}
          onClose={handleControlModalClose}
          onUpdateControl={handleUpdateControl}
          onEvidenceUpload={handleEvidenceUpload}
          auditPeriod={auditPeriod}
        />
      )}

      {/* âœ… FIXED: Enhanced ITAC Detail Modal with state refresh on close */}
      {selectedITAC && (
        <ControlDetailModal
          control={{
            id: selectedITAC.id,
            description: selectedITAC.controlDescription || selectedITAC.controlType || 'ITAC Control',
            controlObjective: selectedITAC.controlObjective || 'Application Control Objective',
            riskLevel: selectedITAC.riskLevel || 'medium',
            category: selectedITAC.system || 'Application Control',
            testingProcedure: selectedITAC.testingProcedure || 'To be defined during walkthrough',
            frequency: selectedITAC.frequency || 'Automated',
            owner: selectedITAC.owner || selectedITAC.system || 'Application Team',
            lastTested: selectedITAC.lastTested,
            status: selectedITAC.status || 'pending',
            name: selectedITAC.processName || selectedITAC.controlType || 'ITAC Control'
          }}
          isOpen={isITACModalOpen}
          onClose={handleITACModalClose}
          onUpdateControl={handleUpdateControl}
          onEvidenceUpload={handleEvidenceUpload}
          auditPeriod={auditPeriod}
        />
      )}

      {/* âœ… FIXED: Enhanced Key Report Detail Modal with state refresh on close */}
      {selectedKeyReport && (
        <ControlDetailModal
          control={{
            id: selectedKeyReport.id,
            name: selectedKeyReport.name || 'Key Report',
            description: selectedKeyReport.description || `${selectedKeyReport.name} - Key audit report`,
            controlObjective: selectedKeyReport.controlObjective || 'Provide audit evidence and support testing procedures',
            riskLevel: selectedKeyReport.criticality || 'medium',
            category: selectedKeyReport.reportType || 'Key Report',
            testingProcedure: selectedKeyReport.testingProcedure || 'Review report for completeness and accuracy',
            frequency: selectedKeyReport.frequency || 'As needed for audit',
            owner: selectedKeyReport.owner || selectedKeyReport.dataSource || 'IT Team',
            lastTested: selectedKeyReport.lastReviewed,
            status: selectedKeyReport.status || 'pending'
          }}
          isOpen={isKeyReportModalOpen}
          onClose={handleKeyReportModalClose}
          onUpdateControl={handleUpdateControl}
          onEvidenceUpload={handleEvidenceUpload}
          auditPeriod={auditPeriod}
        />
      )}

      {/* Walkthrough Detail Modal - No sampling integration needed */}
      {selectedWalkthrough && (
        <WalkthroughDetailModal
          application={selectedWalkthrough}
          isOpen={isWalkthroughModalOpen}
          onClose={() => {
            setIsWalkthroughModalOpen(false);
            setSelectedWalkthrough(null);
          }}
        />
      )}
    </div>
  );
};

export default AuditSetup;